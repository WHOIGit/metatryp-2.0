from proteomics import dbfrom proteomics.models import Taxonimport loggingimport csvimport timedef main():    start_time = time.time()    logger = logging.getLogger('update_taxons')    logger.addHandler(logging.StreamHandler())    logger.setLevel(logging.INFO)    filename = 'Nitrifier_updates.csv'    with open(filename, 'rt') as f:        reader = csv.reader(f)        try:            count = 1;            for row in reader:                if count > 1:                    cur = db.get_psycopg2_cursor()                    #check to see if taxon file matching the fasta file key is in database                    s = "."                    seq = (row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8])                    hierachy = s.join(seq)                    hierachy = hierachy.replace(" ", "_")                    hierachy = hierachy.replace("-", "_")                    hierachy = hierachy.replace("(", "_")                    hierachy = hierachy.replace(")", "_")                    hierachy = hierachy.replace("[", "")                    hierachy = hierachy.replace("]", "")                    hierachy = hierachy.replace("'", "")                    hierachy = hierachy.replace("'", "")                    print(hierachy)                    cur = db.get_psycopg2_cursor()                    cur.execute("select mt.ncbi_id from metagenome_taxon mt where mt.ncbi_id =%s;", (row[0],))                    taxon_result = cur.fetchone()                    # if taxon_result is None:                    ncbi_url = "http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=" + row[0]                    print(ncbi_url)                    cur.execute(                        "update taxon set ncbi_id = %s, tax_group = %s, tax_domain = %s, tax_phylum = %s, tax_class = %s, "                        "tax_order = %s, tax_family = %s, tax_genus = %s, tax_species = %s, ncbi_url = %s, hierachy = %s"                        " where ncbi_id=%s", (                        int(row[0]), row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], ncbi_url, hierachy,                        int(row[0])))                    db.psycopg2_connection.commit()                count = count + 1        except csv.Error as e:           logger.error('file %s, line %d: %s' % (filename, reader.line_num, e))if __name__ == '__main__':    main()